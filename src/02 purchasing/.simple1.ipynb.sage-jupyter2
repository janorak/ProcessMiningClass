{"type":"settings","kernel":"python2","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle","kernel_usage":{"cpu":0,"memory":152915968},"trust":true}
{"type":"cell","id":"69f1fd","pos":0,"input":"Process perspective\n===================","cell_type":"markdown"}
{"exec_count":13,"start":1513556257377,"input":"# Listing 20 Implementing the handover-of-work algorithm in Python\n\nH = dict()\n\nfor caseid in log:\n    for i in range(0, len(log[caseid])-1):\n        ui = log[caseid][i][1]\n        uj = log[caseid][i+1][1]\n        if ui not in H:\n            H[ui] = dict()\n        if uj not in H[ui]:\n            H[ui][uj] = 0\n        H[ui][uj] += 1\n","state":"done","pos":10,"cell_type":"code","type":"cell","end":1513556257380,"id":"800d52","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"a8f8cb02875f825abb6499ae81e87b36a9cdfefd"}}},"exec_count":20,"start":1513556432545,"input":"# Listing 35 Plotting a dotted chart with Matplotlib\n\nimport matplotlib.pyplot as plt\n\nX = dict()\nY = dict()\n\ncaseids = sorted(log.keys(),key=lambda caseid: log[caseid][0][-1])\n\nfor (y, caseid) in enumerate(caseids): \n    for i in range(0, len(log[caseid])):\n        (a, _, x) = log[caseid][i]\n        if a not in X:\n            X[a] = []\n            Y[a] = []\n        X[a].append(x)\n        Y[a].append(y)\n\nfor a in sorted(X.keys()): \n    plt.plot(X[a], Y[a], 'o', label=a, markersize=20, markeredgewidth=0., alpha=0.5)\n\naxes = plt.gca()\n\naxes.set_yticks(range(len(caseids)))\naxes.set_ylim(-1, len(caseids))\naxes.set_yticklabels(caseids)\naxes.set_ylabel('case id')\naxes.invert_yaxis()\n\naxes.set_xlabel('timestamp') \naxes.xaxis.tick_top() \naxes.xaxis.set_label_position('top')\n\nplt.grid(True)\nplt.legend(numpoints=1)\nplt.tight_layout()\nplt.show()\n","state":"done","pos":18,"cell_type":"code","type":"cell","end":1513556436194,"id":"b3cbc6","kernel":"python2"}
{"type":"file","last_load":1513554857413}
{"output":{"0":{"text":"Alberto Duport -- Anna Kaufmann : 37\nAlberto Duport -- Anne Olwada : 45\nAlberto Duport -- Carmen Finacse : 68\nAlberto Duport -- Christian Francois : 43\nAlberto Duport -- Clement Duchot : 47\nAlberto Duport -- Elvira Lores : 38\nAlberto Duport -- Esmana Liubiata : 35\nAlberto Duport -- Esmeralda Clay : 65\nAlberto Duport -- Fjodor Kowalski : 42\nAlberto Duport -- Francis Odell : 60\nAlberto Duport -- Francois de Perrier : 130\nAlberto Duport -- Heinz Gutschmidt : 55\nAlberto Duport -- Immanuel Karagianni : 46\nAlberto Duport -- Karalda Nimwada : 110\nAlberto Duport -- Karel de Groot : 136\nAlberto Duport -- Karen Clarens : 54\nAlberto Duport -- Kim Passa : 45\nAlberto Duport -- Kiu Kan : 76\nAlberto Duport -- Magdalena Predutta : 137\nAlberto Duport -- Maris Freeman : 58\nAlberto Duport -- Miu Hanwan : 43\nAlberto Duport -- Nico Ojenbeer : 53\nAlberto Duport -- Pedro Alvares : 116\nAlberto Duport -- Penn Osterwalder : 44\nAlberto Duport -- Sean Manney : 54\nAlberto Duport -- Tesca Lobes : 45\nAnna Kaufmann -- Anne Olwada : 47\nAnna Kaufmann -- Carmen Finacse : 65\nAnna Kaufmann -- Christian Francois : 39\nAnna Kaufmann -- Clement Duchot : 37\nAnna Kaufmann -- Elvira Lores : 37\nAnna Kaufmann -- Esmana Liubiata : 41\nAnna Kaufmann -- Esmeralda Clay : 48\nAnna Kaufmann -- Fjodor Kowalski : 37\nAnna Kaufmann -- Francis Odell : 43\nAnna Kaufmann -- Francois de Perrier : 126\nAnna Kaufmann -- Heinz Gutschmidt : 38\nAnna Kaufmann -- Immanuel Karagianni : 45\nAnna Kaufmann -- Karalda Nimwada : 107\nAnna Kaufmann -- Karel de Groot : 128\nAnna Kaufmann -- Karen Clarens : 45\nAnna Kaufmann -- Kim Passa : 41\nAnna Kaufmann -- Kiu Kan : 77\nAnna Kaufmann -- Magdalena Predutta : 127\nAnna Kaufmann -- Maris Freeman : 42\nAnna Kaufmann -- Miu Hanwan : 38\nAnna Kaufmann -- Nico Ojenbeer : 45\nAnna Kaufmann -- Pedro Alvares : 105\nAnna Kaufmann -- Penn Osterwalder : 28\nAnna Kaufmann -- Sean Manney : 63\nAnna Kaufmann -- Tesca Lobes : 39\nAnne Olwada -- Carmen Finacse : 67\nAnne Olwada -- Christian Francois : 49\nAnne Olwada -- Clement Duchot : 45\nAnne Olwada -- Elvira Lores : 41\nAnne Olwada -- Esmana Liubiata : 43\nAnne Olwada -- Esmeralda Clay : 61\nAnne Olwada -- Fjodor Kowalski : 45\nAnne Olwada -- Francis Odell : 58\nAnne Olwada -- Francois de Perrier : 138\nAnne Olwada -- Heinz Gutschmidt : 48\nAnne Olwada -- Immanuel Karagianni : 52\nAnne Olwada -- Karalda Nimwada : 118\nAnne Olwada -- Karel de Groot : 141\nAnne Olwada -- Karen Clarens : 53\nAnne Olwada -- Kim Passa : 47\nAnne Olwada -- Kiu Kan : 83\nAnne Olwada -- Magdalena Predutta : 144\nAnne Olwada -- Maris Freeman : 52\nAnne Olwada -- Miu Hanwan : 52\nAnne Olwada -- Nico Ojenbeer : 49\nAnne Olwada -- Pedro Alvares : 122\nAnne Olwada -- Penn Osterwalder : 44\nAnne Olwada -- Sean Manney : 65\nAnne Olwada -- Tesca Lobes : 51\nCarmen Finacse -- Christian Francois : 71\nCarmen Finacse -- Clement Duchot : 65\nCarmen Finacse -- Elvira Lores : 62\nCarmen Finacse -- Esmana Liubiata : 66\nCarmen Finacse -- Esmeralda Clay : 76\nCarmen Finacse -- Fjodor Kowalski : 77\nCarmen Finacse -- Francis Odell : 63\nCarmen Finacse -- Francois de Perrier : 187\nCarmen Finacse -- Heinz Gutschmidt : 52\nCarmen Finacse -- Immanuel Karagianni : 67\nCarmen Finacse -- Karalda Nimwada : 174\nCarmen Finacse -- Karel de Groot : 183\nCarmen Finacse -- Karen Clarens : 64\nCarmen Finacse -- Kim Passa : 69\nCarmen Finacse -- Kiu Kan : 94\nCarmen Finacse -- Magdalena Predutta : 192\nCarmen Finacse -- Maris Freeman : 66\nCarmen Finacse -- Miu Hanwan : 71\nCarmen Finacse -- Nico Ojenbeer : 76\nCarmen Finacse -- Pedro Alvares : 183\nCarmen Finacse -- Penn Osterwalder : 58\nCarmen Finacse -- Sean Manney : 80\nCarmen Finacse -- Tesca Lobes : 69\nChristian Francois -- Clement Duchot : 50\nChristian Francois -- Elvira Lores : 47\nChristian Francois -- Esmana Liubiata : 41\nChristian Francois -- Esmeralda Clay : 57\nChristian Francois -- Fjodor Kowalski : 46\nChristian Francois -- Francis Odell : 50\nChristian Francois -- Francois de Perrier : 131\nChristian Francois -- Heinz Gutschmidt : 46\nChristian Francois -- Immanuel Karagianni : 52\nChristian Francois -- Karalda Nimwada : 114\nChristian Francois -- Karel de Groot : 131\nChristian Francois -- Karen Clarens : 51\nChristian Francois -- Kim Passa : 39\nChristian Francois -- Kiu Kan : 84\nChristian Francois -- Magdalena Predutta : 143\nChristian Francois -- Maris Freeman : 60\nChristian Francois -- Miu Hanwan : 52\nChristian Francois -- Nico Ojenbeer : 43\nChristian Francois -- Pedro Alvares : 121\nChristian Francois -- Penn Osterwalder : 30\nChristian Francois -- Sean Manney : 68\nChristian Francois -- Tesca Lobes : 42\nClement Duchot -- Elvira Lores : 38\nClement Duchot -- Esmana Liubiata : 37\nClement Duchot -- Esmeralda Clay : 61\nClement Duchot -- Fjodor Kowalski : 42\nClement Duchot -- Francis Odell : 44\nClement Duchot -- Francois de Perrier : 132\nClement Duchot -- Heinz Gutschmidt : 49\nClement Duchot -- Immanuel Karagianni : 48\nClement Duchot -- Karalda Nimwada : 117\nClement Duchot -- Karel de Groot : 132\nClement Duchot -- Karen Clarens : 59\nClement Duchot -- Kim Passa : 44\nClement Duchot -- Kiu Kan : 81\nClement Duchot -- Magdalena Predutta : 137\nClement Duchot -- Maris Freeman : 46\nClement Duchot -- Miu Hanwan : 53\nClement Duchot -- Nico Ojenbeer : 47\nClement Duchot -- Pedro Alvares : 118\nClement Duchot -- Penn Osterwalder : 49\nClement Duchot -- Sean Manney : 65\nClement Duchot -- Tesca Lobes : 36\nElvira Lores -- Esmana Liubiata : 42\nElvira Lores -- Esmeralda Clay : 61\nElvira Lores -- Fjodor Kowalski : 49\nElvira Lores -- Francis Odell : 56\nElvira Lores -- Francois de Perrier : 130\nElvira Lores -- Heinz Gutschmidt : 51\nElvira Lores -- Immanuel Karagianni : 47\nElvira Lores -- Karalda Nimwada : 121\nElvira Lores -- Karel de Groot : 135\nElvira Lores -- Karen Clarens : 53\nElvira Lores -- Kim Passa : 42\nElvira Lores -- Kiu Kan : 77\nElvira Lores -- Magdalena Predutta : 136\nElvira Lores -- Maris Freeman : 51\nElvira Lores -- Miu Hanwan : 50\nElvira Lores -- Nico Ojenbeer : 45\nElvira Lores -- Pedro Alvares : 124\nElvira Lores -- Penn Osterwalder : 48\nElvira Lores -- Sean Manney : 61\nElvira Lores -- Tesca Lobes : 44\nEsmana Liubiata -- Esmeralda Clay : 62\nEsmana Liubiata -- Fjodor Kowalski : 44\nEsmana Liubiata -- Francis Odell : 51\nEsmana Liubiata -- Francois de Perrier : 134\nEsmana Liubiata -- Heinz Gutschmidt : 44\nEsmana Liubiata -- Immanuel Karagianni : 53\nEsmana Liubiata -- Karalda Nimwada : 115\nEsmana Liubiata -- Karel de Groot : 129\nEsmana Liubiata -- Karen Clarens : 55\nEsmana Liubiata -- Kim Passa : 45\nEsmana Liubiata -- Kiu Kan : 82\nEsmana Liubiata -- Magdalena Predutta : 129\nEsmana Liubiata -- Maris Freeman : 45\nEsmana Liubiata -- Miu Hanwan : 50\nEsmana Liubiata -- Nico Ojenbeer : 50\nEsmana Liubiata -- Pedro Alvares : 120\nEsmana Liubiata -- Penn Osterwalder : 48\nEsmana Liubiata -- Sean Manney : 54\nEsmana Liubiata -- Tesca Lobes : 41\nEsmeralda Clay -- Fjodor Kowalski : 64\nEsmeralda Clay -- Francis Odell : 66\nEsmeralda Clay -- Francois de Perrier : 175\nEsmeralda Clay -- Heinz Gutschmidt : 58\nEsmeralda Clay -- Immanuel Karagianni : 64\nEsmeralda Clay -- Karalda Nimwada : 160\nEsmeralda Clay -- Karel de Groot : 174\nEsmeralda Clay -- Karen Clarens : 69\nEsmeralda Clay -- Kim Passa : 65\nEsmeralda Clay -- Kiu Kan : 91\nEsmeralda Clay -- Magdalena Predutta : 175\nEsmeralda Clay -- Maris Freeman : 75\nEsmeralda Clay -- Miu Hanwan : 65\nEsmeralda Clay -- Nico Ojenbeer : 70\nEsmeralda Clay -- Pedro Alvares : 163\nEsmeralda Clay -- Penn Osterwalder : 63\nEsmeralda Clay -- Sean Manney : 70\nEsmeralda Clay -- Tesca Lobes : 73\nFjodor Kowalski -- Francis Odell : 52\nFjodor Kowalski -- Francois de Perrier : 134\nFjodor Kowalski -- Heinz Gutschmidt : 46\nFjodor Kowalski -- Immanuel Karagianni : 46\nFjodor Kowalski -- Karalda Nimwada : 116\nFjodor Kowalski -- Karel de Groot : 142\nFjodor Kowalski -- Karen Clarens : 53\nFjodor Kowalski -- Kim Passa : 51\nFjodor Kowalski -- Kiu Kan : 78\nFjodor Kowalski -- Magdalena Predutta : 143\nFjodor Kowalski -- Maris Freeman : 60\nFjodor Kowalski -- Miu Hanwan : 39\nFjodor Kowalski -- Nico Ojenbeer : 50\nFjodor Kowalski -- Pedro Alvares : 119\nFjodor Kowalski -- Penn Osterwalder : 47\nFjodor Kowalski -- Sean Manney : 62\nFjodor Kowalski -- Tesca Lobes : 44\nFrancis Odell -- Francois de Perrier : 155\nFrancis Odell -- Heinz Gutschmidt : 79\nFrancis Odell -- Immanuel Karagianni : 59\nFrancis Odell -- Karalda Nimwada : 117\nFrancis Odell -- Karel de Groot : 155\nFrancis Odell -- Karen Clarens : 63\nFrancis Odell -- Kim Passa : 47\nFrancis Odell -- Kiu Kan : 83\nFrancis Odell -- Magdalena Predutta : 160\nFrancis Odell -- Maris Freeman : 85\nFrancis Odell -- Miu Hanwan : 56\nFrancis Odell -- Nico Ojenbeer : 55\nFrancis Odell -- Pedro Alvares : 124\nFrancis Odell -- Penn Osterwalder : 50\nFrancis Odell -- Sean Manney : 70\nFrancis Odell -- Tesca Lobes : 48\nFrancois de Perrier -- Heinz Gutschmidt : 133\nFrancois de Perrier -- Immanuel Karagianni : 145\nFrancois de Perrier -- Karalda Nimwada : 321\nFrancois de Perrier -- Karel de Groot : 364\nFrancois de Perrier -- Karen Clarens : 158\nFrancois de Perrier -- Kim Passa : 142\nFrancois de Perrier -- Kiu Kan : 223\nFrancois de Perrier -- Magdalena Predutta : 366\nFrancois de Perrier -- Maris Freeman : 153\nFrancois de Perrier -- Miu Hanwan : 137\nFrancois de Perrier -- Nico Ojenbeer : 152\nFrancois de Perrier -- Pedro Alvares : 329\nFrancois de Perrier -- Penn Osterwalder : 137\nFrancois de Perrier -- Sean Manney : 165\nFrancois de Perrier -- Tesca Lobes : 138\nHeinz Gutschmidt -- Immanuel Karagianni : 43\nHeinz Gutschmidt -- Karalda Nimwada : 109\nHeinz Gutschmidt -- Karel de Groot : 138\nHeinz Gutschmidt -- Karen Clarens : 60\nHeinz Gutschmidt -- Kim Passa : 46\nHeinz Gutschmidt -- Kiu Kan : 75\nHeinz Gutschmidt -- Magdalena Predutta : 136\nHeinz Gutschmidt -- Maris Freeman : 62\nHeinz Gutschmidt -- Miu Hanwan : 49\nHeinz Gutschmidt -- Nico Ojenbeer : 53\nHeinz Gutschmidt -- Pedro Alvares : 109\nHeinz Gutschmidt -- Penn Osterwalder : 46\nHeinz Gutschmidt -- Sean Manney : 59\nHeinz Gutschmidt -- Tesca Lobes : 46\nImmanuel Karagianni -- Karalda Nimwada : 128\nImmanuel Karagianni -- Karel de Groot : 139\nImmanuel Karagianni -- Karen Clarens : 65\nImmanuel Karagianni -- Kim Passa : 56\nImmanuel Karagianni -- Kiu Kan : 92\nImmanuel Karagianni -- Magdalena Predutta : 151\nImmanuel Karagianni -- Maris Freeman : 56\nImmanuel Karagianni -- Miu Hanwan : 56\nImmanuel Karagianni -- Nico Ojenbeer : 50\nImmanuel Karagianni -- Pedro Alvares : 130\nImmanuel Karagianni -- Penn Osterwalder : 44\nImmanuel Karagianni -- Sean Manney : 70\nImmanuel Karagianni -- Tesca Lobes : 51\nKaralda Nimwada -- Karel de Groot : 324\nKaralda Nimwada -- Karen Clarens : 155\nKaralda Nimwada -- Kim Passa : 112\nKaralda Nimwada -- Kiu Kan : 208\nKaralda Nimwada -- Magdalena Predutta : 328\nKaralda Nimwada -- Maris Freeman : 125\nKaralda Nimwada -- Miu Hanwan : 120\nKaralda Nimwada -- Nico Ojenbeer : 123\nKaralda Nimwada -- Pedro Alvares : 299\nKaralda Nimwada -- Penn Osterwalder : 114\nKaralda Nimwada -- Sean Manney : 157\nKaralda Nimwada -- Tesca Lobes : 123\nKarel de Groot -- Karen Clarens : 161\nKarel de Groot -- Kim Passa : 145\nKarel de Groot -- Kiu Kan : 226\nKarel de Groot -- Magdalena Predutta : 374\nKarel de Groot -- Maris Freeman : 152\nKarel de Groot -- Miu Hanwan : 143\nKarel de Groot -- Nico Ojenbeer : 151\nKarel de Groot -- Pedro Alvares : 331\nKarel de Groot -- Penn Osterwalder : 130\nKarel de Groot -- Sean Manney : 169\nKarel de Groot -- Tesca Lobes : 138\nKaren Clarens -- Kim Passa : 65\nKaren Clarens -- Kiu Kan : 92\nKaren Clarens -- Magdalena Predutta : 165\nKaren Clarens -- Maris Freeman : 64\nKaren Clarens -- Miu Hanwan : 60\nKaren Clarens -- Nico Ojenbeer : 61\nKaren Clarens -- Pedro Alvares : 147\nKaren Clarens -- Penn Osterwalder : 60\nKaren Clarens -- Sean Manney : 44\nKaren Clarens -- Tesca Lobes : 63\nKim Passa -- Kiu Kan : 82\nKim Passa -- Magdalena Predutta : 140\nKim Passa -- Maris Freeman : 50\nKim Passa -- Miu Hanwan : 47\nKim Passa -- Nico Ojenbeer : 50\nKim Passa -- Pedro Alvares : 121\nKim Passa -- Penn Osterwalder : 40\nKim Passa -- Sean Manney : 59\nKim Passa -- Tesca Lobes : 51\nKiu Kan -- Magdalena Predutta : 230\nKiu Kan -- Maris Freeman : 87\nKiu Kan -- Miu Hanwan : 91\nKiu Kan -- Nico Ojenbeer : 85\nKiu Kan -- Pedro Alvares : 214\nKiu Kan -- Penn Osterwalder : 79\nKiu Kan -- Sean Manney : 96\nKiu Kan -- Tesca Lobes : 75\nMagdalena Predutta -- Maris Freeman : 158\nMagdalena Predutta -- Miu Hanwan : 143\nMagdalena Predutta -- Nico Ojenbeer : 151\nMagdalena Predutta -- Pedro Alvares : 338\nMagdalena Predutta -- Penn Osterwalder : 132\nMagdalena Predutta -- Sean Manney : 170\nMagdalena Predutta -- Tesca Lobes : 142\nMaris Freeman -- Miu Hanwan : 56\nMaris Freeman -- Nico Ojenbeer : 54\nMaris Freeman -- Pedro Alvares : 124\nMaris Freeman -- Penn Osterwalder : 57\nMaris Freeman -- Sean Manney : 59\nMaris Freeman -- Tesca Lobes : 52\nMiu Hanwan -- Nico Ojenbeer : 55\nMiu Hanwan -- Pedro Alvares : 119\nMiu Hanwan -- Penn Osterwalder : 40\nMiu Hanwan -- Sean Manney : 57\nMiu Hanwan -- Tesca Lobes : 46\nNico Ojenbeer -- Pedro Alvares : 125\nNico Ojenbeer -- Penn Osterwalder : 49\nNico Ojenbeer -- Sean Manney : 62\nNico Ojenbeer -- Tesca Lobes : 47\nPedro Alvares -- Penn Osterwalder : 124\nPedro Alvares -- Sean Manney : 165\nPedro Alvares -- Tesca Lobes : 127\nPenn Osterwalder -- Sean Manney : 65\nPenn Osterwalder -- Tesca Lobes : 43\nSean Manney -- Tesca Lobes : 63\n","name":"stdout"}},"exec_count":15,"start":1513556337882,"input":"# Listing 22 Implementing the working together algorithm\nW = dict()\n\nfor caseid in log:\n    S = set()\n    for i in range(0, len(log[caseid])):\n        ui = log[caseid][i][1]\n        S.add(ui)\n    S = sorted(list(S))\n    for i in range(0, len(S)-1):\n        for j in range(i+1, len(S)):\n            ui = S[i]\n            uj = S[j]\n            if ui not in W:\n                W[ui] = dict()\n            if uj not in W[ui]:\n                W[ui][uj] = 0\n            W[ui][uj] += 1\n\nfor ui in sorted(W.keys()):\n    for uj in sorted(W[ui].keys()):\n        print ui, '--', uj, ':', W[ui][uj]","state":"done","pos":12,"cell_type":"code","type":"cell","end":1513556338106,"id":"f05421","kernel":"python2"}
{"output":{"0":{"text":"Amend Purchase Requisition\n","name":"stdout"},"1":{"data":{"image/png":"8f68c3def4f37224da676b412b06183b8f1f2680"}},"2":{"text":"Amend Request for Quotation Requester\n","name":"stdout"},"3":{"data":{"image/png":"db607134e8c1a9e6696ed4bc682800d79247056d"}},"4":{"text":"Amend Request for Quotation Requester Manager\n","name":"stdout"},"5":{"data":{"image/png":"e22fedfe3a58bc13a6d9ce4ace2a15dbfafd04a5"}},"6":{"text":"Analyze Purchase Requisition\n","name":"stdout"},"7":{"data":{"image/png":"d33ffee199018bb0c14dd209855946aa95d40164"}},"8":{"text":"Analyze Quotation comparison Map\n","name":"stdout"},"9":{"data":{"image/png":"77aced5645d2cd1bc2160950d9b92c10499c40ca"}},"10":{"text":"Analyze Request for Quotation\n","name":"stdout"},"11":{"data":{"image/png":"531aac5476338860309c3a55814675afd670f189"}},"12":{"text":"Approve Purchase Order for payment\n","name":"stdout"},"13":{"data":{"image/png":"a40ec234364d15daefb2f1bd77f4923babc9b647"}},"14":{"text":"Authorize Supplier's Invoice payment\n","name":"stdout"},"15":{"data":{"image/png":"9a2daeea3008bac95110c7e8c0216ad16b203c2a"}},"16":{"text":"Choose best option\n","name":"stdout"},"17":{"data":{"image/png":"1d595fdc4d32d3d843a16969b5f10f8e921ef46d"}},"18":{"text":"Confirm Purchase Order\n","name":"stdout"},"19":{"data":{"image/png":"a829f2ec7d0cc3acee61c493ad334cd3d69628eb"}},"20":{"text":"Create Purchase Order\n","name":"stdout"},"21":{"data":{"image/png":"9931859f51f777c2f0beb581861d9f7416765011"}},"22":{"text":"Create Purchase Requisition\n","name":"stdout"},"23":{"data":{"image/png":"f62ccc6550f83a391de77b8e5ac66e65b0ac2c52"}},"24":{"text":"Create Quotation comparison Map\n","name":"stdout"},"25":{"data":{"image/png":"3b5d4f846d41f9548bd0a155ed78a0068d207d54"}},"26":{"text":"Create Request for Quotation Requester\n","name":"stdout"},"27":{"data":{"image/png":"0fa1cee0aab07591bc62d67fdf74cc6c21dd015b"}},"28":{"text":"Create Request for Quotation Requester Manager\n","name":"stdout"},"29":{"data":{"image/png":"a44d517724b6aa259ad60d54081915f35b6570ed"}},"30":{"text":"Deliver Goods Services\n","name":"stdout"},"31":{"data":{"image/png":"6746b6149f47bb2b76237c3c74c6adebc34d3c91"}},"32":{"text":"Pay invoice\n","name":"stdout"},"33":{"data":{"image/png":"1d595fdc4d32d3d843a16969b5f10f8e921ef46d"}},"34":{"text":"Release Purchase Order\n","name":"stdout"},"35":{"data":{"image/png":"0a237d15bda9928a48d012795bacb96d82489534"}},"36":{"text":"Release Supplier's Invoice\n","name":"stdout"},"37":{"data":{"image/png":"3d1a21d2e8db8259e762d3c2864a50048158e825"}},"38":{"text":"Send Request for Quotation to Supplier\n","name":"stdout"},"39":{"data":{"image/png":"975cc014dc6629d8e17d2106f539dcb67c849ab8"}},"40":{"text":"Send invoice\n","name":"stdout"},"41":{"data":{"image/png":"5d95179229f9d77c5117281a234354fde00729ea"}},"42":{"text":"Settle conditions with supplier\n","name":"stdout"},"43":{"data":{"image/png":"016c6185e28700ccfb5996450ab5508b65bc84e9"}},"44":{"text":"Settle dispute with supplier Financial Manager\n","name":"stdout"},"45":{"data":{"image/png":"e3aa128671a45fd221989bcad311660adf805d1a"}},"46":{"text":"Settle dispute with supplier Purchasing Agent\n","name":"stdout"},"47":{"data":{"image/png":"14fc98d63c41027f90902f14f4525077d8386c33"}}},"exec_count":22,"start":1513556475667,"input":"# Listing 37 Plotting the histograms of activity execution time\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nD = dict()\n\nfor caseid in log:\n    for i in range(0, len(log[caseid])):\n        (a, _, t) = log[caseid][i] \n        if i > 0:\n            (_, _, t0) = log[caseid][i-1]\n            d = (t-t0).total_seconds()/(24*3600)\n        else:\n            d = 0. \n        if a not in D:\n            D[a] = []\n        D[a].append(d)\n\ni = 0\nfor a in sorted(D.keys()):\n    print sorted(D.keys())[i]\n    i += 1\n    plt.hist(D[a], bins=[0.1*k for k in range(100)])\n    plt.show()","state":"done","pos":20,"cell_type":"code","type":"cell","end":1513556483794,"id":"b1d6ed","kernel":"python2"}
{"output":{"0":{"text":"Amend Purchase Requisition -> Analyze Purchase Requisition : 8\nAmend Purchase Requisition -> Create Request for Quotation Requester : 3\nAmend Request for Quotation Requester -> Analyze Request for Quotation : 514\nAmend Request for Quotation Requester Manager -> Analyze Request for Quotation : 49\nAnalyze Purchase Requisition -> Amend Purchase Requisition : 11\nAnalyze Purchase Requisition -> Create Request for Quotation Requester Manager : 307\nAnalyze Quotation comparison Map -> Choose best option : 413\nAnalyze Request for Quotation -> Amend Request for Quotation Requester : 514\nAnalyze Request for Quotation -> Amend Request for Quotation Requester Manager : 49\nAnalyze Request for Quotation -> Send Request for Quotation to Supplier : 413\nApprove Purchase Order for payment -> Send invoice : 413\nAuthorize Supplier's Invoice payment -> Pay invoice : 413\nChoose best option -> Settle conditions with supplier : 413\nConfirm Purchase Order -> Deliver Goods Services : 413\nCreate Purchase Order -> Confirm Purchase Order : 413\nCreate Purchase Requisition -> Analyze Purchase Requisition : 374\nCreate Purchase Requisition -> Create Request for Quotation Requester : 234\nCreate Quotation comparison Map -> Analyze Quotation comparison Map : 413\nCreate Request for Quotation Requester -> Analyze Request for Quotation : 237\nCreate Request for Quotation Requester Manager -> Analyze Request for Quotation : 307\nDeliver Goods Services -> Release Purchase Order : 413\nRelease Purchase Order -> Approve Purchase Order for payment : 413\nRelease Purchase Order -> Settle dispute with supplier Purchasing Agent : 26\nRelease Supplier's Invoice -> Authorize Supplier's Invoice payment : 323\nRelease Supplier's Invoice -> Settle dispute with supplier Financial Manager : 80\nSend Request for Quotation to Supplier -> Create Quotation comparison Map : 413\nSend invoice -> Authorize Supplier's Invoice payment : 10\nSend invoice -> Release Supplier's Invoice : 403\nSettle conditions with supplier -> Create Purchase Order : 413\nSettle dispute with supplier Financial Manager -> Authorize Supplier's Invoice payment : 80\nSettle dispute with supplier Purchasing Agent -> Release Purchase Order : 26\n","name":"stdout"}},"exec_count":6,"start":1513556127980,"input":"F = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])-1):\n        ai = log[caseid][i][0]\n        aj = log[caseid][i+1][0] \n        if ai not in F:\n            F[ai] = dict()\n        if aj not in F[ai]:\n            F[ai][aj] = 0\n        F[ai][aj] += 1\n\nfor ai in sorted(F.keys()):\n    for aj in sorted(F[ai].keys()):\n        print ai, '->', aj, ':', F[ai][aj]\n","state":"done","pos":2,"cell_type":"code","type":"cell","end":1513556128004,"id":"08230e","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"4016e869fda1096ca5ba718ef360333323964410"},"exec_count":16}},"exec_count":16,"start":1513556343971,"input":"# Listing 24 Generating an undirected graph with PyGraphviz\nimport graphviz as gv\n\nG = gv.Graph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'circle'\n\nfor ui in W:\n    for uj in W[ui]:\n        G.edge(ui, uj, label=str(W[ui][uj]))\n\nG","state":"done","pos":13,"cell_type":"code","type":"cell","end":1513556356098,"id":"f7d6e3","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"43ee963907a6a218d1463e80c99dfa49b7f38e53"},"exec_count":17}},"exec_count":17,"start":1513556365374,"input":"# Listing 24 Generating an undirected graph with PyGraphviz\nimport graphviz as gv\n\nG = gv.Graph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'circle'\n\nvalues = [W[ui][uj] for ui in W for uj in W[ui]]\nx_min = min(values)\nx_max = max(values)\n\ny_min = 1.0\ny_max = 5.0\n\nfor ui in W:\n    for uj in W[ui]:\n        x = W[ui][uj]\n        y = y_min + (y_max-y_min) * (float(x-x_min) / float(x_max-x_min))**3\n        G.edge(ui, uj, label=str(x), penwidth=str(y))\n\nG","state":"done","pos":14,"cell_type":"code","type":"cell","end":1513556378044,"id":"740944","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"158c0dadbbf6f132ad8f55792a9bfa35f654b9b8"},"exec_count":14}},"exec_count":14,"start":1513556262969,"input":"# Listing 21 Generating the output graph with Graphviz\n\nimport graphviz as pg\n\nG = gv.Digraph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'circle'\n\nvalues = [H[ui][uj] for ui in H for uj in H[ui]]\nx_min = min(values)\nx_max = max(values)\n\ny_min = 1.0\ny_max = 5.0\n\nfor ui in H:\n    for uj in H[ui]:\n        x = H[ui][uj]\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.edge(ui, uj, label=str(x), penwidth=str(y))\n\nG","state":"done","pos":11,"cell_type":"code","type":"cell","end":1513556282771,"id":"c31acd","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"971839e7bb04998ab57717212537f7835c9896ee"},"exec_count":11}},"exec_count":11,"start":1513556231169,"input":"# Listing 34 Drawing the graph with average timestamp differences\n\nimport graphviz as gv\n\nG = gv.Digraph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'box'\n\nD = dict()\nfor caseid in log:\n    for i in range(0,len(log[caseid])-1):\n        (ai,_,ti) = log[caseid][i]\n        (aj,_,tj) = log[caseid][i+1]\n        if ai not in D:\n            D[ai] = dict()\n        if aj not in D[ai]:\n            D[ai][aj] = []\n        D[ai][aj].append(tj-ti)\n\nfor ai in sorted(D.keys()):\n    for aj in sorted(D[ai].keys()):\n        sum_td = sum(D[ai][aj], datetime.timedelta(0))\n        count_td = len(D[ai][aj])\n        avg_td = sum_td/count_td\n        avg_td -= datetime.timedelta(microseconds=avg_td.microseconds)\n        D[ai][aj] = avg_td\n\nvalues = [D[ai][aj].total_seconds() for ai in D for aj in D[ai]]\nx_min = min(values)\nx_max = max(values)\n\ny_min = 1.0\ny_max = 5.0\n\nfor ai in D:\n    for aj in D[ai]:\n        x = D[ai][aj].total_seconds()\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.edge(ai, aj, label=str(D[ai][aj]), penwidth=str(y))\n\nG","state":"done","pos":8,"cell_type":"code","type":"cell","end":1513556231577,"id":"60a470","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"3d5bca3b3bafb3e78763baa38bf3d5dfcacc794c"},"exec_count":9}},"exec_count":9,"start":1513556175418,"input":"import graphviz as gv\n\nG = gv.Digraph(strict=False)\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'box'\n\nF = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])-1):\n        ai = log[caseid][i][0]\n        aj = log[caseid][i+1][0] \n        if ai not in F:\n            F[ai] = dict()\n        if aj not in F[ai]:\n            F[ai][aj] = 0\n        F[ai][aj] += 1\n\nA = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])):\n        ai = log[caseid][i][0]\n        if ai not in A:\n            A[ai] = 0\n        A[ai] += 1\n\nx_min = min(A.values())\nx_max = max(A.values())\nfor ai in A:\n    text = ai + '\\n(' + str(A[ai]) + ')'\n    gray = int(float(x_max - A[ai]) / float(x_max - x_min) * 100.)\n    fill = 'gray' + str(gray)\n    font = 'black'\n    if gray < 50:\n        font = 'white'\n    G.node(ai, label=text, style='filled', fillcolor=fill, fontcolor=font)\n\nvalues = [F[ai][aj] for ai in F for aj in F[ai]]\nx_min = min(values)\nx_max = max(values)\ny_min = 1.0\ny_max = 5.0\nfor ai in F:\n    for aj in F[ai]:\n        x = F[ai][aj]\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.edge(ai, aj, label=str(x), penwidth=str(y))\n\nG","state":"done","pos":5,"cell_type":"code","type":"cell","end":1513556175611,"id":"afff9b","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"19fd18bd34fb44dffd87552fb18135ad16379dca"},"exec_count":7}},"exec_count":7,"start":1513556133784,"input":"import graphviz as gv\n\nG = gv.Digraph(strict=False)\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'box'\n\nF = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])-1):\n        ai = log[caseid][i][0]\n        aj = log[caseid][i+1][0] \n        if ai not in F:\n            F[ai] = dict()\n        if aj not in F[ai]:\n            F[ai][aj] = 0\n        F[ai][aj] += 1\n\nfor ai in F:\n    for aj in F[ai]:\n        G.edge(ai, aj, label=str(F[ai][aj]))\n\nG","state":"done","pos":3,"cell_type":"code","type":"cell","end":1513556134065,"id":"3d1524","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"e049d218c7a3ecfb86fe455b0aaa8b3cb8fb5970"}}},"exec_count":21,"start":1513556461870,"input":"# Listing 36 Plotting a dotted chart with relative time\n\nimport matplotlib.pyplot as plt\n\nX = dict()\nY = dict()\n\ncaseids = sorted(log.keys(),key=lambda caseid: log[caseid][-1][-1]-log[caseid][0][-1])\n\nfor (y, caseid) in enumerate(caseids):\n    x0 = log[caseid][0][-1]\n    for i in range(0, len(log[caseid])):\n        (a, _, x) = log[caseid][i]\n        if a not in X:\n            X[a] = []\n            Y[a] = []\n        X[a].append((x-x0).total_seconds()/(24*3600))\n        Y[a].append(y)\n\nfor a in sorted(X.keys()): \n    plt.plot(X[a], Y[a], 'o', label=a, markersize=20, markeredgewidth=0., alpha=0.5)\n\naxes = plt.gca()\n\naxes.set_yticks(range(len(caseids)))\naxes.set_ylim(-1, len(caseids))\naxes.set_yticklabels(caseids)\naxes.set_ylabel('case id')\naxes.invert_yaxis()\n\naxes.set_xlabel('days') \naxes.xaxis.tick_top() \naxes.xaxis.set_label_position('top')\n\nplt.grid(True)\nplt.legend(numpoints=1)\nplt.tight_layout()\nplt.show()\n\n","state":"done","pos":19,"cell_type":"code","type":"cell","end":1513556465807,"id":"1a43fe","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"dfa4faabd422613fcefb9dc683e6d3fcade16a97"},"exec_count":19}},"exec_count":19,"start":1513556409426,"input":"# Listing 28 Counting the number of times that each user performed each task\n\nimport graphviz as gv\n\nUA = dict()\n\nfor caseid in log:\n    for i in range(0, len(log[caseid])):\n        ai = log[caseid][i][0]\n        ui = log[caseid][i][1]\n        if ui not in UA:\n            UA[ui] = dict()\n        if ai not in UA[ui]:\n            UA[ui][ai] = 0\n        UA[ui][ai] += 1\n\nG = gv.Graph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'circle'\n\nvalues = [UA[ui][ai] for ui in UA for ai in UA[ui]]\nx_min = min(values)\nx_max = max(values)\n\ny_min = 1.0\ny_max = 5.0\n\nfor ui in UA:\n    for ai in UA[ui]:\n        x = UA[ui][ai]\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.edge(ui, ai, label=str(x), penwidth=str(y))\n\nG","state":"done","pos":16,"cell_type":"code","type":"cell","end":1513556409690,"id":"76deb2","kernel":"python2"}
{"type":"cell","id":"4257f7","pos":9,"input":"Organizational mining\n=====================","cell_type":"markdown"}
{"output":{"0":{"text":"['Alberto Duport', 'Anna Kaufmann', 'Anne Olwada', 'Carmen Finacse', 'Christian Francois', 'Clement Duchot', 'Elvira Lores', 'Esmana Liubiata', 'Esmeralda Clay', 'Fjodor Kowalski', 'Francis Odell', 'Francois de Perrier', 'Heinz Gutschmidt', 'Immanuel Karagianni', 'Karalda Nimwada', 'Karel de Groot', 'Karen Clarens', 'Kim Passa', 'Kiu Kan', 'Magdalena Predutta', 'Maris Freeman', 'Miu Hanwan', 'Nico Ojenbeer', 'Pedro Alvares', 'Penn Osterwalder', 'Sean Manney', 'Tesca Lobes']\n","name":"stdout"},"1":{"data":{"image/svg+xml":"9bdcbe45f809bc5d9995cd4134a2503f76fb76a9"},"exec_count":18}},"exec_count":18,"start":1513556388541,"input":"# Listing 26 Collecting the set of activities performed by each user\nimport graphviz as gv\n\nUA = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])):\n        ai = log[caseid][i][0]\n        ui = log[caseid][i][1]\n        if ui not in UA:\n            UA[ui] = set()\n        UA[ui].add(ai)\n\nG = gv.Graph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'circle'\n\nU = sorted(UA.keys())\nprint U\nfor i in range(0, len(U)-1):\n    for j in range(i+1, len(U)):\n        ui = U[i]\n        uj = U[j]\n        x = len(UA[ui] & UA[uj])\n        if x > 0:\n            G.edge(ui, uj, label=str(x))\n\nG","state":"done","pos":15,"cell_type":"code","type":"cell","end":1513556388918,"id":"a6587f","kernel":"python2"}
{"type":"cell","id":"94aa14","pos":17,"input":"Performance perspective\n=======================","cell_type":"markdown"}
{"output":{"0":{"data":{"image/svg+xml":"7725e22404adc5eca04311df10ebfc407faef588"},"exec_count":8}},"exec_count":8,"start":1513556169317,"input":"import graphviz as gv\n\nG = gv.Digraph(strict=False)\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'box'\n\nF = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])-1):\n        ai = log[caseid][i][0]\n        aj = log[caseid][i+1][0] \n        if ai not in F:\n            F[ai] = dict()\n        if aj not in F[ai]:\n            F[ai][aj] = 0\n        F[ai][aj] += 1\n\nvalues = [F[ai][aj] for ai in F for aj in F[ai]]\nx_min = min(values)\nx_max = max(values)\ny_min = 1.0\ny_max = 5.0\n\nfor ai in F:\n    for aj in F[ai]:\n        x = F[ai][aj]\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.edge(ai, aj, label=str(x), penwidth=str(y))\n\nG","state":"done","pos":4,"cell_type":"code","type":"cell","end":1513556169764,"id":"6a1378","kernel":"python2"}
{"output":{"0":{"text":"Amend Purchase Requisition -> Analyze Purchase Requisition : 18:12:30\nAmend Purchase Requisition -> Create Request for Quotation Requester : 4:52:20\nAmend Request for Quotation Requester -> Analyze Request for Quotation : 8 days, 12:35:49\nAmend Request for Quotation Requester Manager -> Analyze Request for Quotation : 10 days, 13:22:52\nAnalyze Purchase Requisition -> Amend Purchase Requisition : 11:51:54\nAnalyze Purchase Requisition -> Create Request for Quotation Requester Manager : 0:12:07\nAnalyze Quotation comparison Map -> Choose best option : 0:20:09\nAnalyze Request for Quotation -> Amend Request for Quotation Requester : 1:13:00\nAnalyze Request for Quotation -> Amend Request for Quotation Requester Manager : 16:22:41\nAnalyze Request for Quotation -> Send Request for Quotation to Supplier : 17:08:27\nApprove Purchase Order for payment -> Send invoice : 1 day, 22:54:06\nAuthorize Supplier's Invoice payment -> Pay invoice : 0:35:10\nChoose best option -> Settle conditions with supplier : 12:03:05\nConfirm Purchase Order -> Deliver Goods Services : 2 days, 20:05:05\nCreate Purchase Order -> Confirm Purchase Order : 1 day, 19:18:11\nCreate Purchase Requisition -> Analyze Purchase Requisition : 17:40:23\nCreate Purchase Requisition -> Create Request for Quotation Requester : 4:35:35\nCreate Quotation comparison Map -> Analyze Quotation comparison Map : 10:03:21\nCreate Request for Quotation Requester -> Analyze Request for Quotation : 6 days, 3:38:08\nCreate Request for Quotation Requester Manager -> Analyze Request for Quotation : 4 days, 6:30:18\nDeliver Goods Services -> Release Purchase Order : 1 day, 8:54:41\nRelease Purchase Order -> Approve Purchase Order for payment : 14:40:35\nRelease Purchase Order -> Settle dispute with supplier Purchasing Agent : 7:49:50\nRelease Supplier's Invoice -> Authorize Supplier's Invoice payment : 0:05:00\nRelease Supplier's Invoice -> Settle dispute with supplier Financial Manager : 0:35:58\nSend Request for Quotation to Supplier -> Create Quotation comparison Map : 7:54:02\nSend invoice -> Authorize Supplier's Invoice payment : 14:23:54\nSend invoice -> Release Supplier's Invoice : 14:20:38\nSettle conditions with supplier -> Create Purchase Order : 19:15:07\nSettle dispute with supplier Financial Manager -> Authorize Supplier's Invoice payment : 0:24:04\nSettle dispute with supplier Purchasing Agent -> Release Purchase Order : 16:48:04\n","name":"stdout"}},"exec_count":10,"start":1513556219469,"input":"# Listing 32 Calculating the average timestamp difference for each transition\nD = dict()\nfor caseid in log:\n    for i in range(0,len(log[caseid])-1):\n        (ai,_,ti) = log[caseid][i]\n        (aj,_,tj) = log[caseid][i+1]\n        if ai not in D:\n            D[ai] = dict()\n        if aj not in D[ai]:\n            D[ai][aj] = []\n        D[ai][aj].append(tj-ti)\n        \nfor ai in sorted(D.keys()):\n    for aj in sorted(D[ai].keys()):\n        sum_td = sum(D[ai][aj], datetime.timedelta(0))\n        count_td = len(D[ai][aj])\n        avg_td = sum_td/count_td\n        avg_td -= datetime.timedelta(microseconds=avg_td.microseconds)\n        D[ai][aj] = avg_td\n        print ai, '->', aj, ':', D[ai][aj]","state":"done","pos":7,"cell_type":"code","type":"cell","end":1513556219501,"id":"ca1fbe","kernel":"python2"}
{"output":{"0":{"more_output":true}},"exec_count":5,"start":1513555206173,"input":"import datetime\n\nf = open('purchasing.csv', 'r')\n\nlog = dict()\n\nfor line in f:\n    line = line.strip()\n    if len(line) == 0:\n        continue\n    parts = line.split(',')\n    caseid = parts[0]\n    task = parts[3]\n    user = parts[4]\n    timestamp = datetime.datetime.strptime(parts[1], '%Y-%m-%d %H:%M:%S')\n    if caseid not in log:\n        log[caseid] = []\n    event = (task, user, timestamp)\n    log[caseid].append(event)\n    \nf.close()\n\nfor caseid in log:\n    for (task, user, timestamp) in log[caseid]:\n        print caseid, task, user, timestamp","scrolled":true,"state":"done","pos":1,"cell_type":"code","type":"cell","end":1513555210436,"id":"ff2292","kernel":"python2"}
{"type":"cell","id":"35e2c6","pos":21,"input":"","cell_type":"code","exec_count":0}