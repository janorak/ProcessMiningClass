{"type":"settings","kernel":"python2","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle","kernel_usage":{"cpu":0,"memory":109977600},"trust":true}
{"output":{"0":{"data":{"image/svg+xml":"cc17f74f730681cb65550d34f307f50d82fc45ef"},"exec_count":10}},"exec_count":10,"start":1513553972172,"input":"# Listing 21 Generating the output graph with Graphviz\n\nimport graphviz as pg\n\nG = gv.Digraph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'circle'\n\nvalues = [H[ui][uj] for ui in H for uj in H[ui]]\nx_min = min(values)\nx_max = max(values)\n\ny_min = 1.0\ny_max = 5.0\n\nfor ui in H:\n    for uj in H[ui]:\n        x = H[ui][uj]\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.edge(ui, uj, label=str(x), penwidth=str(y))\n\nG","state":"done","pos":11,"cell_type":"code","type":"cell","end":1513553972263,"id":"13a6d6","kernel":"python2"}
{"output":{"0":{"text":"1 a u1 2016-04-09 17:36:47\n1 b u3 2016-04-11 09:11:13\n1 d u6 2016-04-12 10:00:12\n1 e u7 2016-04-12 18:21:32\n1 f u8 2016-04-13 13:27:41\n1 g u6 2016-04-18 19:14:14\n1 h u2 2016-04-19 16:48:16\n3 a u2 2016-04-25 08:39:24\n3 b u4 2016-04-29 10:56:14\n3 c u1 2016-04-30 15:41:22\n2 a u2 2016-04-14 08:56:09\n2 b u3 2016-04-14 09:36:02\n2 d u5 2016-04-15 10:16:40\n2 g u6 2016-04-19 15:39:15\n2 e u7 2016-04-20 14:39:45\n2 f u8 2016-04-22 09:16:16\n2 h u1 2016-04-26 12:19:46\n","name":"stdout"}},"exec_count":6,"start":1513553963274,"input":"# Listing 31 Parsing the timestamps when reading the event log\nimport datetime\n\nf = open('eventlog.csv', 'r')\n\nlog = dict()\n\nfor line in f:\n    line = line.strip()\n    if len(line) == 0:\n        continue\n    parts = line.split(';')\n    caseid = parts[0]\n    task = parts[1]\n    user = parts[2]\n    timestamp = datetime.datetime.strptime(parts[3], '%Y-%m-%d %H:%M:%S')\n    if caseid not in log:\n        log[caseid] = []\n    event = (task, user, timestamp)\n    log[caseid].append(event)\n    \nf.close()\n\nfor caseid in log:\n    for (task, user, timestamp) in log[caseid]:\n        print caseid, task, user, timestamp","state":"done","pos":6,"cell_type":"code","type":"cell","end":1513553963286,"id":"2a3a97","kernel":"python2"}
{"type":"cell","id":"36d2a3","pos":9,"input":"Organizational mining\n=====================","cell_type":"markdown"}
{"output":{"0":{"data":{"image/svg+xml":"a330d963efac14d1a95e5e2d60a82d5d67b67573"},"exec_count":15}},"exec_count":15,"start":1513553980775,"input":"# Listing 28 Counting the number of times that each user performed each task\n\nimport graphviz as gv\n\nUA = dict()\n\nfor caseid in log:\n    for i in range(0, len(log[caseid])):\n        ai = log[caseid][i][0]\n        ui = log[caseid][i][1]\n        if ui not in UA:\n            UA[ui] = dict()\n        if ai not in UA[ui]:\n            UA[ui][ai] = 0\n        UA[ui][ai] += 1\n\nG = gv.Graph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'circle'\n\nvalues = [UA[ui][ai] for ui in UA for ai in UA[ui]]\nx_min = min(values)\nx_max = max(values)\n\ny_min = 1.0\ny_max = 5.0\n\nfor ui in UA:\n    for ai in UA[ui]:\n        x = UA[ui][ai]\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.edge(ui, ai, label=str(x), penwidth=str(y))\n\nG","state":"done","pos":16,"cell_type":"code","type":"cell","end":1513553980888,"id":"5c0e0a","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"1c797c48bac0b840454920eb3eb1ea1873f9cc17"},"exec_count":8}},"exec_count":8,"start":1513553966206,"input":"# Listing 34 Drawing the graph with average timestamp differences\n\nimport graphviz as gv\n\nG = gv.Digraph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'box'\n\nD = dict()\nfor caseid in log:\n    for i in range(0,len(log[caseid])-1):\n        (ai,_,ti) = log[caseid][i]\n        (aj,_,tj) = log[caseid][i+1]\n        if ai not in D:\n            D[ai] = dict()\n        if aj not in D[ai]:\n            D[ai][aj] = []\n        D[ai][aj].append(tj-ti)\n\nfor ai in sorted(D.keys()):\n    for aj in sorted(D[ai].keys()):\n        sum_td = sum(D[ai][aj], datetime.timedelta(0))\n        count_td = len(D[ai][aj])\n        avg_td = sum_td/count_td\n        avg_td -= datetime.timedelta(microseconds=avg_td.microseconds)\n        D[ai][aj] = avg_td\n\nvalues = [D[ai][aj].total_seconds() for ai in D for aj in D[ai]]\nx_min = min(values)\nx_max = max(values)\n\ny_min = 1.0\ny_max = 5.0\n\nfor ai in D:\n    for aj in D[ai]:\n        x = D[ai][aj].total_seconds()\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.edge(ai, aj, label=str(D[ai][aj]), penwidth=str(y))\n\nG","state":"done","pos":8,"cell_type":"code","type":"cell","end":1513553966317,"id":"7e43e4","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"3ead7c048aa71dd72ef2ceb12a7bca0e1d9b1ef9"},"exec_count":4}},"exec_count":4,"start":1513553959396,"input":"import graphviz as gv\n\nG = gv.Digraph(strict=False)\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'box'\n\nF = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])-1):\n        ai = log[caseid][i][0]\n        aj = log[caseid][i+1][0] \n        if ai not in F:\n            F[ai] = dict()\n        if aj not in F[ai]:\n            F[ai][aj] = 0\n        F[ai][aj] += 1\n\nvalues = [F[ai][aj] for ai in F for aj in F[ai]]\nx_min = min(values)\nx_max = max(values)\ny_min = 1.0\ny_max = 5.0\n\nfor ai in F:\n    for aj in F[ai]:\n        x = F[ai][aj]\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.edge(ai, aj, label=str(x), penwidth=str(y))\n\nG","state":"done","pos":4,"cell_type":"code","type":"cell","end":1513553959512,"id":"b419e8","kernel":"python2"}
{"type":"file","last_load":1513553741574}
{"output":{"0":{"text":"a -> b : 3\nb -> c : 1\nb -> d : 2\nd -> e : 1\nd -> g : 1\ne -> f : 2\nf -> g : 1\nf -> h : 1\ng -> e : 1\ng -> h : 1\n","name":"stdout"}},"exec_count":2,"start":1513553955470,"input":"F = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])-1):\n        ai = log[caseid][i][0]\n        aj = log[caseid][i+1][0] \n        if ai not in F:\n            F[ai] = dict()\n        if aj not in F[ai]:\n            F[ai][aj] = 0\n        F[ai][aj] += 1\n\nfor ai in sorted(F.keys()):\n    for aj in sorted(F[ai].keys()):\n        print ai, '->', aj, ':', F[ai][aj]\n","state":"done","pos":2,"cell_type":"code","type":"cell","end":1513553955484,"id":"02393b","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"97a2af7a9bbd325880bbeac0021b415cecf3528e"}}},"exec_count":16,"start":1513553982286,"input":"# Listing 35 Plotting a dotted chart with Matplotlib\n\nimport matplotlib.pyplot as plt\n\nX = dict()\nY = dict()\n\ncaseids = sorted(log.keys(),key=lambda caseid: log[caseid][0][-1])\n\nfor (y, caseid) in enumerate(caseids): \n    for i in range(0, len(log[caseid])):\n        (a, _, x) = log[caseid][i]\n        if a not in X:\n            X[a] = []\n            Y[a] = []\n        X[a].append(x)\n        Y[a].append(y)\n\nfor a in sorted(X.keys()): \n    plt.plot(X[a], Y[a], 'o', label=a, markersize=20, markeredgewidth=0., alpha=0.5)\n\naxes = plt.gca()\n\naxes.set_yticks(range(len(caseids)))\naxes.set_ylim(-1, len(caseids))\naxes.set_yticklabels(caseids)\naxes.set_ylabel('case id')\naxes.invert_yaxis()\n\naxes.set_xlabel('timestamp') \naxes.xaxis.tick_top() \naxes.xaxis.set_label_position('top')\n\nplt.grid(True)\nplt.legend(numpoints=1)\nplt.tight_layout()\nplt.show()\n","state":"done","pos":18,"cell_type":"code","type":"cell","end":1513553982524,"id":"44f173","kernel":"python2"}
{"output":{"0":{"text":"a -> b : 1 day, 22:10:23\nb -> c : 1 day, 4:45:08\nb -> d : 1 day, 0:44:48\nd -> e : 8:21:20\nd -> g : 4 days, 5:22:35\ne -> f : 1 day, 6:51:20\nf -> g : 5 days, 5:46:33\nf -> h : 4 days, 3:03:30\ng -> e : 23:00:30\ng -> h : 21:34:02\n","name":"stdout"}},"exec_count":7,"start":1513553964701,"input":"# Listing 32 Calculating the average timestamp difference for each transition\nD = dict()\nfor caseid in log:\n    for i in range(0,len(log[caseid])-1):\n        (ai,_,ti) = log[caseid][i]\n        (aj,_,tj) = log[caseid][i+1]\n        if ai not in D:\n            D[ai] = dict()\n        if aj not in D[ai]:\n            D[ai][aj] = []\n        D[ai][aj].append(tj-ti)\n        \nfor ai in sorted(D.keys()):\n    for aj in sorted(D[ai].keys()):\n        sum_td = sum(D[ai][aj], datetime.timedelta(0))\n        count_td = len(D[ai][aj])\n        avg_td = sum_td/count_td\n        avg_td -= datetime.timedelta(microseconds=avg_td.microseconds)\n        D[ai][aj] = avg_td\n        print ai, '->', aj, ':', D[ai][aj]","state":"done","pos":7,"cell_type":"code","type":"cell","end":1513553964719,"id":"135d2e","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"f8c7d03d0e9c74ffa1f4e218997570c737593d30"},"exec_count":3}},"exec_count":3,"start":1513553957384,"input":"import graphviz as gv\n\nG = gv.Digraph(strict=False)\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'box'\n\nF = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])-1):\n        ai = log[caseid][i][0]\n        aj = log[caseid][i+1][0] \n        if ai not in F:\n            F[ai] = dict()\n        if aj not in F[ai]:\n            F[ai][aj] = 0\n        F[ai][aj] += 1\n\nfor ai in F:\n    for aj in F[ai]:\n        G.edge(ai, aj, label=str(F[ai][aj]))\n\nG","state":"done","pos":3,"cell_type":"code","type":"cell","end":1513553957830,"id":"99516b","kernel":"python2"}
{"output":{"0":{"text":"{'u8': {'u6': 1, 'u1': 1}, 'u5': {'u6': 1}, 'u4': {'u1': 1}, 'u7': {'u8': 2}, 'u6': {'u7': 2, 'u2': 1}, 'u1': {'u3': 1}, 'u3': {'u5': 1, 'u6': 1}, 'u2': {'u4': 1, 'u3': 1}}\n","name":"stdout"}},"exec_count":9,"start":1513553968364,"input":"# Listing 20 Implementing the handover-of-work algorithm in Python\n\nH = dict()\n\nfor caseid in log:\n    for i in range(0, len(log[caseid])-1):\n        ui = log[caseid][i][1]\n        uj = log[caseid][i+1][1]\n        if ui not in H:\n            H[ui] = dict()\n        if uj not in H[ui]:\n            H[ui][uj] = 0\n        H[ui][uj] += 1\n\nprint H","state":"done","pos":10,"cell_type":"code","type":"cell","end":1513553968368,"id":"e772ee","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"4c474556d207f12d548c6a6808d40897f629a7d3"}}},"exec_count":17,"start":1513553983776,"input":"# Listing 36 Plotting a dotted chart with relative time\n\nimport matplotlib.pyplot as plt\n\nX = dict()\nY = dict()\n\ncaseids = sorted(log.keys(),key=lambda caseid: log[caseid][-1][-1]-log[caseid][0][-1])\n\nfor (y, caseid) in enumerate(caseids):\n    x0 = log[caseid][0][-1]\n    for i in range(0, len(log[caseid])):\n        (a, _, x) = log[caseid][i]\n        if a not in X:\n            X[a] = []\n            Y[a] = []\n        X[a].append((x-x0).total_seconds()/(24*3600))\n        Y[a].append(y)\n\nfor a in sorted(X.keys()): \n    plt.plot(X[a], Y[a], 'o', label=a, markersize=20, markeredgewidth=0., alpha=0.5)\n\naxes = plt.gca()\n\naxes.set_yticks(range(len(caseids)))\naxes.set_ylim(-1, len(caseids))\naxes.set_yticklabels(caseids)\naxes.set_ylabel('case id')\naxes.invert_yaxis()\n\naxes.set_xlabel('days') \naxes.xaxis.tick_top() \naxes.xaxis.set_label_position('top')\n\nplt.grid(True)\nplt.legend(numpoints=1)\nplt.tight_layout()\nplt.show()\n\n","state":"done","pos":19,"cell_type":"code","type":"cell","end":1513553984032,"id":"2aaf47","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"4993b24ba091a9a8860d4070d4347fbef1237349"},"exec_count":12}},"exec_count":12,"start":1513553975169,"input":"# Listing 24 Generating an undirected graph with PyGraphviz\nimport graphviz as gv\n\nG = gv.Graph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'circle'\n\nfor ui in W:\n    for uj in W[ui]:\n        G.edge(ui, uj, label=str(W[ui][uj]))\n\nG","state":"done","pos":13,"cell_type":"code","type":"cell","end":1513553975269,"id":"14682a","kernel":"python2"}
{"output":{"0":{"text":"['u1', 'u2', 'u3', 'u4', 'u5', 'u6', 'u7', 'u8']\n","name":"stdout"},"1":{"data":{"image/svg+xml":"3bffad91d088f00ffe224380e633259bbc9391dd"},"exec_count":14}},"exec_count":14,"start":1513553978266,"input":"# Listing 26 Collecting the set of activities performed by each user\nimport graphviz as gv\n\nUA = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])):\n        ai = log[caseid][i][0]\n        ui = log[caseid][i][1]\n        if ui not in UA:\n            UA[ui] = set()\n        UA[ui].add(ai)\n\nG = gv.Graph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'circle'\n\nU = sorted(UA.keys())\nprint U\nfor i in range(0, len(U)-1):\n    for j in range(i+1, len(U)):\n        ui = U[i]\n        uj = U[j]\n        x = len(UA[ui] & UA[uj])\n        if x > 0:\n            G.edge(ui, uj, label=str(x))\n\nG","state":"done","pos":15,"cell_type":"code","type":"cell","end":1513553978369,"id":"560ff8","kernel":"python2"}
{"output":{"0":{"text":"1 a u1 2016-04-09 17:36:47\n1 b u3 2016-04-11 09:11:13\n1 d u6 2016-04-12 10:00:12\n1 e u7 2016-04-12 18:21:32\n1 f u8 2016-04-13 13:27:41\n1 g u6 2016-04-18 19:14:14\n1 h u2 2016-04-19 16:48:16\n3 a u2 2016-04-25 08:39:24\n3 b u4 2016-04-29 10:56:14\n3 c u1 2016-04-30 15:41:22\n2 a u2 2016-04-14 08:56:09\n2 b u3 2016-04-14 09:36:02\n2 d u5 2016-04-15 10:16:40\n2 g u6 2016-04-19 15:39:15\n2 e u7 2016-04-20 14:39:45\n2 f u8 2016-04-22 09:16:16\n2 h u1 2016-04-26 12:19:46\n","name":"stdout"}},"exec_count":1,"start":1513553953971,"input":"f = open('eventlog.csv', 'r')\n\nlog = dict()\n\nfor line in f:\n    line = line.strip()\n    if len(line) == 0:\n        continue\n    [caseid, task, user, timestamp] = line.split(';')\n    if caseid not in log:\n        log[caseid] = []\n    event = (task, user, timestamp)\n    log[caseid].append(event)\n    \nf.close()\n\nfor caseid in log:\n    for (task, user, timestamp) in log[caseid]:\n        print caseid, task, user, timestamp\n","state":"done","pos":1,"cell_type":"code","type":"cell","end":1513553953987,"id":"ab7fe5","kernel":"python2"}
{"output":{"0":{"text":"u1 -- u2 : 3\nu1 -- u3 : 2\nu1 -- u4 : 1\nu1 -- u5 : 1\nu1 -- u6 : 2\nu1 -- u7 : 2\nu1 -- u8 : 2\nu2 -- u3 : 2\nu2 -- u4 : 1\nu2 -- u5 : 1\nu2 -- u6 : 2\nu2 -- u7 : 2\nu2 -- u8 : 2\nu3 -- u5 : 1\nu3 -- u6 : 2\nu3 -- u7 : 2\nu3 -- u8 : 2\nu5 -- u6 : 1\nu5 -- u7 : 1\nu5 -- u8 : 1\nu6 -- u7 : 2\nu6 -- u8 : 2\nu7 -- u8 : 2\n","name":"stdout"}},"exec_count":11,"start":1513553973665,"input":"# Listing 22 Implementing the working together algorithm\nW = dict()\n\nfor caseid in log:\n    S = set()\n    for i in range(0, len(log[caseid])):\n        ui = log[caseid][i][1]\n        S.add(ui)\n    S = sorted(list(S))\n    for i in range(0, len(S)-1):\n        for j in range(i+1, len(S)):\n            ui = S[i]\n            uj = S[j]\n            if ui not in W:\n                W[ui] = dict()\n            if uj not in W[ui]:\n                W[ui][uj] = 0\n            W[ui][uj] += 1\n\nfor ui in sorted(W.keys()):\n    for uj in sorted(W[ui].keys()):\n        print ui, '--', uj, ':', W[ui][uj]","state":"done","pos":12,"cell_type":"code","type":"cell","end":1513553973695,"id":"d08abd","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"0e3d990d9e0619a6ab2063634413046caa839fc7"},"exec_count":13}},"exec_count":13,"start":1513553976634,"input":"# Listing 24 Generating an undirected graph with PyGraphviz\nimport graphviz as gv\n\nG = gv.Graph(strict=False)\n\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'circle'\n\nvalues = [W[ui][uj] for ui in W for uj in W[ui]]\nx_min = min(values)\nx_max = max(values)\n\ny_min = 1.0\ny_max = 5.0\n\nfor ui in W:\n    for uj in W[ui]:\n        x = W[ui][uj]\n        y = y_min + (y_max-y_min) * (float(x-x_min) / float(x_max-x_min))**3\n        G.edge(ui, uj, label=str(x), penwidth=str(y))\n\nG","state":"done","pos":14,"cell_type":"code","type":"cell","end":1513553976744,"id":"aefee2","kernel":"python2"}
{"output":{"0":{"text":"a\n","name":"stdout"},"1":{"data":{"image/png":"25987810a1848b372ace31b61c8273936d9af591"}},"2":{"text":"b\n","name":"stdout"},"3":{"data":{"image/png":"c626435368e12f133ddf5f332f96080dd20d5e68"}},"4":{"text":"c\n","name":"stdout"},"5":{"data":{"image/png":"40d494c55cd26bbdee397715986dc2472f65b610"}},"6":{"text":"d\n","name":"stdout"},"7":{"data":{"image/png":"fc0bcdaa5eacb9a0371b0a8658ad65bde56df446"}},"8":{"text":"e\n","name":"stdout"},"9":{"data":{"image/png":"51ece44e828dc5a13041574bedfb878756fa0bb0"}},"10":{"text":"f\n","name":"stdout"},"11":{"data":{"image/png":"458375a2cf14808b9f03b0eebc8d4f8c312fbdc0"}},"12":{"text":"g\n","name":"stdout"},"13":{"data":{"image/png":"b96abb342d3aa8ec6f7cebced67e2ff49ee70ff7"}},"14":{"text":"h\n","name":"stdout"},"15":{"data":{"image/png":"d528488b890695f3af7776a3b382233aa189c5b1"}}},"exec_count":18,"start":1513553985579,"input":"# Listing 37 Plotting the histograms of activity execution time\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nD = dict()\n\nfor caseid in log:\n    for i in range(0, len(log[caseid])):\n        (a, _, t) = log[caseid][i] \n        if i > 0:\n            (_, _, t0) = log[caseid][i-1]\n            d = (t-t0).total_seconds()/(24*3600)\n        else:\n            d = 0. \n        if a not in D:\n            D[a] = []\n        D[a].append(d)\n\ni = 0\nfor a in sorted(D.keys()):\n    print sorted(D.keys())[i]\n    i += 1\n    plt.hist(D[a], bins=[0.1*k for k in range(100)])\n    plt.show()","state":"done","pos":20,"cell_type":"code","type":"cell","end":1513553988269,"id":"8793a1","kernel":"python2"}
{"output":{"0":{"data":{"image/svg+xml":"0047e2cbef63df6c4a4599059767eb0f93bb35b6"},"exec_count":5}},"exec_count":5,"start":1513553960967,"input":"import graphviz as gv\n\nG = gv.Digraph(strict=False)\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'box'\n\nF = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])-1):\n        ai = log[caseid][i][0]\n        aj = log[caseid][i+1][0] \n        if ai not in F:\n            F[ai] = dict()\n        if aj not in F[ai]:\n            F[ai][aj] = 0\n        F[ai][aj] += 1\n\nA = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])):\n        ai = log[caseid][i][0]\n        if ai not in A:\n            A[ai] = 0\n        A[ai] += 1\n\nx_min = min(A.values())\nx_max = max(A.values())\nfor ai in A:\n    text = ai + '\\n(' + str(A[ai]) + ')'\n    gray = int(float(x_max - A[ai]) / float(x_max - x_min) * 100.)\n    fill = 'gray' + str(gray)\n    font = 'black'\n    if gray < 50:\n        font = 'white'\n    G.node(ai, label=text, style='filled', fillcolor=fill, fontcolor=font)\n\nvalues = [F[ai][aj] for ai in F for aj in F[ai]]\nx_min = min(values)\nx_max = max(values)\ny_min = 1.0\ny_max = 5.0\nfor ai in F:\n    for aj in F[ai]:\n        x = F[ai][aj]\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.edge(ai, aj, label=str(x), penwidth=str(y))\n\nG","state":"done","pos":5,"cell_type":"code","type":"cell","end":1513553961094,"id":"cbd534","kernel":"python2"}
{"type":"cell","id":"6aeaa8","pos":21,"input":""}
{"type":"cell","id":"184a27","pos":17,"input":"Performance perspective\n=======================","cell_type":"markdown"}
{"exec_count":19,"input":"Process perspective\n===================","state":"done","pos":0,"cell_type":"markdown","type":"cell","id":"405a0c","kernel":"python2"}