{"type":"settings","kernel":"python2","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83394560},"trust":true}
{"type":"cell","id":"cc49cf","pos":6,"input":"# Listing 36 Plotting a dotted chart with relative time\n\nimport matplotlib.pyplot as plt\n\nX = dict()\nY = dict()\n\ncaseids = sorted(log.keys(),key=lambda caseid: log[caseid][-1][-1]-log[caseid][0][-1])\n\nfor (y, caseid) in enumerate(caseids):\n    x0 = log[caseid][0][-1]\n    for i in range(0, len(log[caseid])):\n        (a, _, x) = log[caseid][i]\n        if a not in X:\n            X[a] = []\n            Y[a] = []\n        X[a].append((x-x0).total_seconds()/(24*3600))\n        Y[a].append(y)\n\nfor a in sorted(X.keys()): \n    plt.plot(X[a], Y[a], 'o', label=a, markersize=10, markeredgewidth=0., alpha=0.5)\n\naxes = plt.gca()\n\naxes.set_yticks(range(len(caseids)))\naxes.set_ylim(-1, len(caseids))\naxes.set_yticklabels(caseids)\naxes.set_ylabel('case id')\naxes.invert_yaxis()\n\naxes.set_xlabel('days') \naxes.xaxis.tick_top() \naxes.xaxis.set_label_position('top')\n\nplt.grid(True)\nplt.legend(numpoints=1,loc='center left', bbox_to_anchor=(1, 0.5)) #loc='center left', bbox_to_anchor=(1, 0.5)\nplt.tight_layout()\nplt.show()","output":{"0":{"data":{"image/png":"bc42b314ed6be28b3a0e82ebc114e85678dcd84b"},"output_type":"execute_result","exec_count":22}},"cell_type":"code","exec_count":22}
{"type":"cell","id":"7c659b","pos":4,"input":"# Listing 34 Drawing the graph with average timestamp differences\n\nimport pygraphviz as pgv\n\nG = pgv.AGraph(strict=False, directed=True)\n\nG.graph_attr['rankdir'] = 'TB'\nG.node_attr['shape'] = 'box'\n\nvalues = [D[ai][aj].total_seconds() for ai in D for aj in D[ai]]\nx_min = min(values)\nx_max = max(values)\n\ny_min = 1.0\ny_max = 5.0\n\nfor ai in D:\n    for aj in D[ai]:\n        x = D[ai][aj].total_seconds()\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.add_edge(ai, aj, label=D[ai][aj], penwidth=y)\n\nG.draw('PurchasingExample.png', prog='dot')","cell_type":"code","exec_count":4}
{"type":"cell","id":"699b43","pos":2,"input":"import pygraphviz as pgv\n\nF = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])-1):\n        ai = log[caseid][i][0]\n        aj = log[caseid][i+1][0] \n        if ai not in F:\n            F[ai] = dict()\n        if aj not in F[ai]:\n            F[ai][aj] = 0\n        F[ai][aj] += 1 \n        \nA = dict()\nfor caseid in log:\n    for i in range(0, len(log[caseid])):\n        ai = log[caseid][i][0]\n        if ai not in A:\n            A[ai] = 0\n        A[ai] += 1\n\nG = pgv.AGraph(strict=False, directed=True)\nG.graph_attr['rankdir'] = 'LR'\nG.node_attr['shape'] = 'box'\n\nx_min = min(A.values())\nx_max = max(A.values())\nfor ai in A:\n    text = ai + '\\n(' + str(A[ai]) + ')'\n    gray = int(float(x_max - A[ai]) / float(x_max - x_min) * 100.)\n    fill = 'gray' + str(gray)\n    font = 'black'\n    if gray < 50:\n        font = 'white'\n    G.add_node(ai, label=text, style='filled', fillcolor=fill, fontcolor=font)\n\nvalues = [F[ai][aj] for ai in F for aj in F[ai]]\nx_min = min(values)\nx_max = max(values)\ny_min = 1.0\ny_max = 5.0\nfor ai in F:\n    for aj in F[ai]:\n        x = F[ai][aj]\n        y = y_min + (y_max-y_min) * float(x-x_min) / float(x_max-x_min)\n        G.add_edge(ai, aj, label=x, penwidth=y)\n\nG.draw('PurchasingExample.png', prog='dot')","cell_type":"code","exec_count":2}
{"type":"cell","id":"7befa1","pos":3,"input":"# Listing 32 Calculating the average timestamp difference for each transition\nD = dict()\nfor caseid in log:\n    for i in range(0,len(log[caseid])-1):\n        (ai,_,ti) = log[caseid][i]\n        (aj,_,tj) = log[caseid][i+1]\n        if ai not in D:\n            D[ai] = dict()\n        if aj not in D[ai]:\n            D[ai][aj] = []\n        D[ai][aj].append(tj-ti)\n        \nfor ai in sorted(D.keys()):\n    for aj in sorted(D[ai].keys()):\n        sum_td = sum(D[ai][aj], datetime.timedelta(0))\n        count_td = len(D[ai][aj])\n        avg_td = sum_td/count_td\n        avg_td -= datetime.timedelta(microseconds=avg_td.microseconds)\n        D[ai][aj] = avg_td\n        print ai, '->', aj, ':', D[ai][aj]","output":{"0":{"name":"stdout","output_type":"stream","text":"Amend Purchase Requisition -> Analyze Purchase Requisition : 18:12:30\nAmend Purchase Requisition -> Create Request for Quotation Requester : 4:52:20\nAmend Request for Quotation Requester -> Analyze Request for Quotation : 8 days, 12:35:49\nAmend Request for Quotation Requester Manager -> Analyze Request for Quotation : 10 days, 13:22:52\nAnalyze Purchase Requisition -> Amend Purchase Requisition : 11:51:54\nAnalyze Purchase Requisition -> Create Request for Quotation Requester Manager : 0:12:07\nAnalyze Quotation comparison Map -> Choose best option : 0:20:09\nAnalyze Request for Quotation -> Amend Request for Quotation Requester : 1:13:00\nAnalyze Request for Quotation -> Amend Request for Quotation Requester Manager : 16:22:41\nAnalyze Request for Quotation -> Send Request for Quotation to Supplier : 17:08:27\nApprove Purchase Order for payment -> Send invoice : 1 day, 22:54:06\nAuthorize Supplier's Invoice payment -> Pay invoice : 0:35:10\nChoose best option -> Settle conditions with supplier : 12:03:05\nConfirm Purchase Order -> Deliver Goods Services : 2 days, 20:05:05\nCreate Purchase Order -> Confirm Purchase Order : 1 day, 19:18:11\nCreate Purchase Requisition -> Analyze Purchase Requisition : 17:40:23\nCreate Purchase Requisition -> Create Request for Quotation Requester : 4:35:35\nCreate Quotation comparison Map -> Analyze Quotation comparison Map : 10:03:21\nCreate Request for Quotation Requester -> Analyze Request for Quotation : 6 days, 3:38:08\nCreate Request for Quotation Requester Manager -> Analyze Request for Quotation : 4 days, 6:30:18\nDeliver Goods Services -> Release Purchase Order : 1 day, 8:54:41\nRelease Purchase Order -> Approve Purchase Order for payment : 14:40:35\nRelease Purchase Order -> Settle dispute with supplier Purchasing Agent : 7:49:50\nRelease Supplier's Invoice -> Authorize Supplier's Invoice payment : 0:05:00\nRelease Supplier's Invoice -> Settle dispute with supplier Financial Manager : 0:35:58\nSend Request for Quotation to Supplier -> Create Quotation comparison Map : 7:54:02\nSend invoice -> Authorize Supplier's Invoice payment : 14:23:54\nSend invoice -> Release Supplier's Invoice : 14:20:38\nSettle conditions with supplier -> Create Purchase Order : 19:15:07\nSettle dispute with supplier Financial Manager -> Authorize Supplier's Invoice payment : 0:24:04\nSettle dispute with supplier Purchasing Agent -> Release Purchase Order : 16:48:04\n"}},"cell_type":"code","exec_count":3}
{"type":"cell","id":"5a367a","pos":8,"input":"","cell_type":"code","exec_count":0}
{"type":"file","last_load":1513554508873}
{"output":{"0":{"more_output":true}},"exec_count":3,"start":1513554778677,"input":"# Listing 31 Parsing the timestamps when reading the event log\nimport datetime\n\nf = open('Purchasing.csv', 'r')\n\nlog = dict()\n\nfor line in f:\n    line = line.strip()\n    if len(line) == 0:\n        continue\n    parts = line.split(',')\n    caseid = parts[0]\n    task = parts[3]\n    user = parts[4]\n    timestamp = datetime.datetime.strptime(parts[1], '%Y-%m-%d %H:%M:%S')\n    if caseid not in log:\n        log[caseid] = []\n    event = (task, user, timestamp)\n    log[caseid].append(event)\n    \nf.close()\n\nfor caseid in log:\n    for (task, user, timestamp) in log[caseid]:\n        print caseid, task, user, timestamp","scrolled":true,"state":"done","pos":1,"cell_type":"code","type":"cell","end":1513554782497,"id":"4b7b28","kernel":"python2"}
{"type":"cell","id":"742f34","pos":5,"input":"# Listing 35 Plotting a dotted chart with Matplotlib\n\nimport matplotlib.pyplot as plt\n\nX = dict()\nY = dict()\n\ncaseids = sorted(log.keys(),key=lambda caseid: log[caseid][0][-1])\n\nfor (y, caseid) in enumerate(caseids): \n    for i in range(0, len(log[caseid])):\n        (a, _, x) = log[caseid][i]\n        if a not in X:\n            X[a] = []\n            Y[a] = []\n        X[a].append(x)\n        Y[a].append(y)\n\nfor a in sorted(X.keys()): \n    plt.plot(X[a], Y[a], 'o', label=a, markersize=20, markeredgewidth=0., alpha=0.5)\n\naxes = plt.gca()\n\naxes.set_yticks(range(len(caseids)))\naxes.set_ylim(-1, len(caseids))\naxes.set_yticklabels(caseids)\naxes.set_ylabel('case id')\naxes.invert_yaxis()\n\naxes.set_xlabel('timestamp') \naxes.xaxis.tick_top() \naxes.xaxis.set_label_position('top')\n\nplt.grid(True)\nplt.legend(numpoints=1,loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()","output":{"0":{"data":{"image/png":"84b95baa76c0953e7582f67808f27f8a44cb7123"},"output_type":"execute_result","exec_count":42}},"cell_type":"code","exec_count":42}
{"type":"cell","id":"0151d0","pos":7,"input":"# Listing 37 Plotting the histograms of activity execution time\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nD = dict()\n\nfor caseid in log:\n    for i in range(0, len(log[caseid])):\n        (a, _, t) = log[caseid][i] \n        if i > 0:\n            (_, _, t0) = log[caseid][i-1]\n            d = (t-t0).total_seconds()/(24*3600)\n        else:\n            d = 0. \n        if a not in D:\n            D[a] = []\n        D[a].append(d)\n\nnrows = 12\nncols = 2\n\ni = 0\nfor a in sorted(D.keys()):\n    print sorted(D.keys())[i]\n    i += 1\n    plt.hist(D[a], bins=[0.1*k for k in range(100)])\n    plt.show()\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"Amend Purchase Requisition\n"},"1":{"data":{"image/png":"cfbb543be9daac6c5d90d3641723240e63aeac76"},"output_type":"execute_result","exec_count":43},"2":{"name":"stdout","output_type":"stream","text":"Amend Request for Quotation Requester\n"},"3":{"data":{"image/png":"14a0634965350fb507d6808bd808ece87ff82f97"},"output_type":"execute_result","exec_count":43},"4":{"name":"stdout","output_type":"stream","text":"Amend Request for Quotation Requester Manager\n"},"5":{"data":{"image/png":"ad9541b8b4881d7a25820fa987a0b73651109d41"},"output_type":"execute_result","exec_count":43},"6":{"name":"stdout","output_type":"stream","text":"Analyze Purchase Requisition\n"},"7":{"data":{"image/png":"6c774babc5466b48514c626fdb53e6affd3fe313"},"output_type":"execute_result","exec_count":43},"8":{"name":"stdout","output_type":"stream","text":"Analyze Quotation comparison Map\n"},"9":{"data":{"image/png":"a85126741e8c637094d7f9d28b3ca3cd607d5646"},"output_type":"execute_result","exec_count":43},"10":{"name":"stdout","output_type":"stream","text":"Analyze Request for Quotation\n"},"11":{"data":{"image/png":"9a40f40eba299e13d553aea8ee0026f789157aec"},"output_type":"execute_result","exec_count":43},"12":{"name":"stdout","output_type":"stream","text":"Approve Purchase Order for payment\n"},"13":{"data":{"image/png":"50a4fec89f90e4015c222083931a73cd7c8bbc23"},"output_type":"execute_result","exec_count":43},"14":{"name":"stdout","output_type":"stream","text":"Authorize Supplier's Invoice payment\n"},"15":{"data":{"image/png":"ab6d209b5f95cf79bd45775cf499fe06baaed09a"},"output_type":"execute_result","exec_count":43},"16":{"name":"stdout","output_type":"stream","text":"Choose best option\n"},"17":{"data":{"image/png":"07046fede9051741ab997fef8821a2fe047ef4ef"},"output_type":"execute_result","exec_count":43},"18":{"name":"stdout","output_type":"stream","text":"Confirm Purchase Order\n"},"19":{"data":{"image/png":"a6cbfd4ca4bc71da39e51ffde60f2240929d1fea"},"output_type":"execute_result","exec_count":43},"20":{"name":"stdout","output_type":"stream","text":"Create Purchase Order\n"},"21":{"data":{"image/png":"cca591daf0504f7abc3a5fe19b2a414275191055"},"output_type":"execute_result","exec_count":43},"22":{"name":"stdout","output_type":"stream","text":"Create Purchase Requisition\n"},"23":{"data":{"image/png":"d97aa5e4f3bebf9ee3a9adf2e6f0b30833bf66ea"},"output_type":"execute_result","exec_count":43},"24":{"name":"stdout","output_type":"stream","text":"Create Quotation comparison Map\n"},"25":{"data":{"image/png":"a5be3f3e130c17afe44b18b4dc492086df6c2f22"},"output_type":"execute_result","exec_count":43},"26":{"name":"stdout","output_type":"stream","text":"Create Request for Quotation Requester\n"},"27":{"data":{"image/png":"98330e1404bc3a36bc58953160aaa35bd7e6256b"},"output_type":"execute_result","exec_count":43},"28":{"name":"stdout","output_type":"stream","text":"Create Request for Quotation Requester Manager\n"},"29":{"data":{"image/png":"a55aae6ad1105f7475ed1362540fa37069fcacd9"},"output_type":"execute_result","exec_count":43},"30":{"name":"stdout","output_type":"stream","text":"Deliver Goods Services\n"},"31":{"data":{"image/png":"74edfc04d1878f3515643cf8698e30ebf2dd96a9"},"output_type":"execute_result","exec_count":43},"32":{"name":"stdout","output_type":"stream","text":"Pay invoice\n"},"33":{"data":{"image/png":"07046fede9051741ab997fef8821a2fe047ef4ef"},"output_type":"execute_result","exec_count":43},"34":{"name":"stdout","output_type":"stream","text":"Release Purchase Order\n"},"35":{"data":{"image/png":"788c14eb8ebc3c27578b8229e94430de04075347"},"output_type":"execute_result","exec_count":43},"36":{"name":"stdout","output_type":"stream","text":"Release Supplier's Invoice\n"},"37":{"data":{"image/png":"96d89bd9b22896a616d04c632aeffdacfc963b18"},"output_type":"execute_result","exec_count":43},"38":{"name":"stdout","output_type":"stream","text":"Send Request for Quotation to Supplier\n"},"39":{"data":{"image/png":"44a707ec40966bcfd96296f35a7026eaa82b467d"},"output_type":"execute_result","exec_count":43},"40":{"name":"stdout","output_type":"stream","text":"Send invoice\n"},"41":{"data":{"image/png":"284b788571af230abb2be7ea4707c5abd29b010f"},"output_type":"execute_result","exec_count":43},"42":{"name":"stdout","output_type":"stream","text":"Settle conditions with supplier\n"},"43":{"data":{"image/png":"cea8240537236dd4a47c600e427027387d8b169f"},"output_type":"execute_result","exec_count":43},"44":{"name":"stdout","output_type":"stream","text":"Settle dispute with supplier Financial Manager\n"},"45":{"data":{"image/png":"0d21f502d16562c3717bf142c522339b9e65b4a4"},"output_type":"execute_result","exec_count":43},"46":{"name":"stdout","output_type":"stream","text":"Settle dispute with supplier Purchasing Agent\n"},"47":{"data":{"image/png":"71d857595a712fd1f0213dbd3a929bbfda9c7de1"},"output_type":"execute_result","exec_count":43}},"cell_type":"code","exec_count":43}
{"type":"cell","id":"39d3bc","pos":0,"input":"Process perspective\n===================","cell_type":"markdown"}